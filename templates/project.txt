[ python ]

Modules raise exceptions to force editing.

/__init__.py/#!/pl/python
	"""
	# Package module. Overview documentation only.
	# Mostly empty package modules are used to allow
	# navigation into other areas of the package without
	# risking an exception.
	"""
	raise RuntimeError("initialized package was not modified")
/core.py/#!/pl/python
	"""
	# Primary internal module if any.

	# In cases a &.library module is being composed from smaller modules,
	# the modules may need some exceptions or classes common across all
	# supporting modules. The &.core module intends to serve this purpose.

	# Some notable examples of where a core module is needed are exceptions.
	# Given a module using exceptions defined by a project that is imported
	# by a &.library module, the exceptions, naturally, cannot be defined in
	# &.library. The &.core module is the recommended location for such classes.
	"""
	raise RuntimeError("initialized package was not modified")
/library.py/#!/pl/python
	"""
	# Primary exposed functionality.

	# For many projects, this is the __init__.py module,
	# but for the fault.development context, it is often desired
	# to navigate the module hierarchy without importing any
	# functionality

	# The &.library module is used in cases where aggregation is desired.
	# In cases where aggregation is not desired, the &.library module should
	# not be included.
	"""

	def function(x, y, *z):
		"""
		# Performs some interesting transformation.
		# The sections below are semantic and often interpreted specially
		# by documentation processors.

		# [ Parameters ]
		# /x/
			# The first parameter. Joins with annotation of parameter named `x`.
		# /y/
			# The second parameter.
		# /z/
			# A series of optional parameters.

		# [ Returns ]
		# /&None/
			# Performed no operation.
		# /&int/
			# A count of operations performed.

		# [ Exceptions ]
		# /&RuntimeError/
			# Something ambiguous.

		# [ Effects ]
		# Description of side effects of the function if any.

		# [ Engineering ]
		# A section directed toward developers *of* the project.
		# Often containing future direction or intent.
		"""
		pass

	raise RuntimeError("initialized package was not modified")
/project.txt/#!/text/fault
	/identifier/
		`URL-To-Project(No versions, project "home page")`
	/name/
		`name-of-project`
	/abstract/
		Paragraphs regarding the purpose of the project.
	/icon/
		'<emoji or URL to icon>'
	/versioning/
		'continuous|semantic|inconsistent' # if unspecified, inconsistent is presumed
	/controller/
		`domain name or mailto of project authority`
	/contact/
		`email or URL to an appropriate party for inquiries`
/test/
	/__init__.py/#!/pl/python
		"""
		# Test context initialization.
		"""

		raise RuntimeError("initialized package not updated")

		def context(test):
			"""
			# Global setup function.
			# Use atexit to cleanup.
			"""
			pass
	/test_library.py/#!/pl/python
		"""
		# Test module.
		"""

		import sys
		from .. import library

		def test_passes(test):
			"""
			# Overview of test API.
			"""
			test/1 == 1
			test/1 != 0
			test/1 > 0
			test/1 < 2

			class Class(object):
				pass
			test.isinstance(Class(), Class)

			class Subclass(Class):
				pass
			test.issubclass(Class, Class)
			test.issubclass(Subclass, Class)

			def Raised():
				raise RuntimeError("trapped")
			test/RuntimeError ^ Raised

			# Containment
			test/1 >> {1}
			test/{2,3} << 2
			test/(2 in {2}) == True # Loses parameter in stack.

		def test_skipped(test):
			test.skip("reason for skip")

		def test_failure(test):
			test.fail("initialized package not updated")

		if __name__ == '__main__':
			import sys
			from fault.test import library as libtest
			libtest.execute(sys.modules[__name__])
/documentation/
	/introduction.txt/#!/text/fault
		Startup documentation. Probably avoid describing usage outside of
		supportive illustrations.

		[ Concepts ]

		Describe project concepts here. Generally written for audiences unfamiliar
		with the project and its concerns.

		[ Goals ]

		Note explicit goals and direction of the project.
	/context.txt/#!/text/fault
		[ References ]
		...

		[ Glossary ]

		The section whose first-level dictionaries are considered
		referencable terms throughout the project.

		/term
			Colloquial definition of (term)&term.
	/usage.txt/#!/text/fault
		Primary narrative.

		[ Hello, World! ]

		Information about the hello world interfaces.
	/mechanics.txt/#!/text/fault
		Discuss project mechanics here if at all.
		Often well positioned comments suffice, but given reasonably complicated
		implementations, highlights of the mechanical concepts are useful.

		[ Internal Patterns ]
		...
/bin/
	/__init__.py/#!/pl/python
		"""
		# Project Executables.
		"""
		__factor_type__ = 'executables'
	/execute.py/#!/pl/python
		"""
		# Executable entry point for use with -m.
		"""

		def main(*args):
			pass

		if __name__ == '__main__':
			import sys
			main(sys.argv[1:])
