[ Glossary ]

Index of terms used organized into subsections describing their context.

[ Glossary >> Project Structure ]

/Factor
	A part of a &Product. An addressable part of a project. Usually used
	to refer to Composite Factors as they are of primary interest to
	&..development.

/Project
	A Factor consisting of a set of Factors making up a &Product.

/Product
	The conceptual effect of a Project. Often Project and Product can be used
	interchangeably, but Product is usually referring to the conceptual collection
	of factors.

/Context Factor
	A collection of &Project Factors.

/Fraction
	A subfactor of a Composite Factor.
	For C/C++, this usually maps to an individual
	translation unit. A source file inside a Composite Factor.

/Composite Factor
	A Factor consisting of a set files, called Fractions, that are intended
	to compose the Factor.

/Fragment
	An internal part of a Factor or Fraction. A Python class could be a
	Fragment of a Factor. Anything that is addressable within a Factor's Module.

[ Glossary >> Construction ]

/Target
	The files constructed by a, usually, Composite Factor.

/Construction Context
	The set of mechanisms ultimately used to process Factors for a build.

/Mechanism
	The part of a Construction Context used to identify how to process
	a given input into the requested Factor Type.

/Factor Processing Instructions
	The instructions used to build a factor for use. Normally conjured
	by a Construction Context.

/Inductance
	The local (same package directory) installation of composite factors,
	and Python bytecode.

/Materialization
	The, currently, conceptual phase of forming the Product. This is
	an implicit step between Inductance and Installation.

/Factor Type
	The application or use of the target.
	Executable, Library, Extension, or Fragment.

[ Glossary >> Testing ]

/Metrics
	The measurements collected described the effects of the tests provided
	by a project.

/Harness
	In the context of &.libtest and &.testing, a harness is an
	object used to manage execution of the tests. Harnesses define how and
	what tests are executed.

/Fate
	Refers to the result of a &.libtest.Test.

/Seal
	Refers to the execution of a &.libtest.Test: seal the fate of a test.

/Validation
	The execution of tests for the purpose of checking an inducted build.
	Often prior to installation and potentially excluding Unit Tests.

[ Glossary >> Build Intentions ]

/Optimal
	Factors built for optimal, subjective, performance.

/Debug
	Factors constructed with debugging symbols and any additional source level
	tools enabled by preprocessing instructions.

/Test
	Purpose used to enable injection ports and debugging that might otherwise
	be disabled.

/Metrics
	A purpose identical to Test, but with coverage and profiling
	instrumentation enabled for gathering measurements about a Project's tests.

/Profiling
	Purpose enabling regular profiling instrumentation.

/Coverage
	Purpose enabling regular coverage instrumentation.
