[ Glossary ]

Index of terms used organized into subsections describing their context.

[ Glossary >> Project Structure ]

/Corpus/
	An entire collection of source.

	A Corpus is arbitrarily defined, but usually refers the entire collection of data and
	source code used to build the &Products produced by an entity. An entity may
	choose to organize their source code in multiple corpuses, but usually the interest
	lies in the entire set.

/Factor/
	An addressable part of a &Product. For most &Products, this will be a Python
	module or a (term)`Composite Factor`

/Project/
	A set of interdependent &Factors managed within a single delta stream.

/Product/
	A set of processed &Factors.

/Context Factor/
	A collection of &Project Factors.

/Fraction/
	A contributing subfactor of a Composite Factor.
	For C/C++, this would be an individual
	translation unit. A source file inside a Composite Factor.

/Composite Factor/
	A Factor consisting of a set files, called Fractions, that are intended
	to compose the Factor.

/Fragment/
	An internal part of a Factor or Fraction. A Python class could be a
	Fragment of a Factor. Anything that is addressable within the (term)`Delineated Form`.

	This meaning is where &.schemas.fragments derives its name.

[ Glossary >> Construction ]

/Delineated Form/
	A &.schemas.fragments instance describing the (term)`Factor`.

/Target/
	The files constructed by a, usually, Composite Factor.

/Construction Context/
	The set of mechanisms ultimately used to process Factors for a build.

/Mechanism/
	The part of a Construction Context used to identify how to process
	a given input into the requested Factor Type.

/Factor Processing Instructions/
	The instructions used to build a factor for use. Normally conjured
	by a Construction Context.

/Incorporation/
	The local (same package directory) installation of composite factors,
	and Python bytecode.

/Materialization/
	The, currently, conceptual phase of forming the Product. This is
	an implicit step between Inductance and Installation.

/Factor Type/
	The application or use of the target.
	Executable, Library, Extension, or Fragment.

[ Glossary >> Testing ]

/Metrics/
	The measurements collected described the effects of the tests provided
	by a project.

/Harness/
	In the context of &.libtest and &.testing, a harness is an
	object used to manage execution of the tests. Harnesses define how and
	what tests are executed.

/Fate/
	Refers to the result of a &.libtest.Test.

/Seal/
	Refers to the execution of a &.libtest.Test: seal the fate of a test.

/Validation/
	The execution of tests for the purpose of checking an inducted build.
	Often prior to installation and potentially excluding Unit Tests.

[ Glossary >> Build Intentions ]

Intentions are used to select a Construction Context that can properly process
the factors of a Corpus.

/Optimal/
	Factors built for optimal, subjective, performance.

/Debug/
	Factors constructed with debugging symbols and any additional source level
	tools enabled by preprocessing instructions.

/Test/
	Purpose used to enable injection ports and debugging that might otherwise
	be disabled.

/Metrics/
	A purpose identical to Test, but with coverage and profiling
	instrumentation enabled for gathering measurements about a Project's tests.

/Profiling/
	Purpose enabling regular profiling instrumentation.

/Coverage/
	Intent enabling regular coverage instrumentation.
