[ High-Level Construction Commands ]

cwctx, chctx

Current working projects.
f +pkg
f -pkg
f ls [list cwp's]
f -*
f void [clear cwp's pycache]
f induct, construct, test, validate, etc.

[ Low-Level Construction Commands ]

The sections in this chapter introduce a set of ideas that are often implicit.
&..development makes these explicit at the cost of having to learn
a new set of commands and having to manage a new set of possible failures.

The factor processing instructions use Python's loader interface to identify
possible factors. Packages and modules will occasionally be imported to
extract information. Given this, it is recommended that
(system/environ)`PYTHONDONTWRITEBYTECODE` be set to `1` and
(system/environ)`PYTHONOPTIMIZE` be unset:

#!/pl/sh
	PYTHONDONTWRITEBYTECODE=1
	export PYTHONDONTWRITEBYTECODE
	unset PYTHONOPTIMIZE

Unless the operating system manages construction contexts itself, they must
be generated by &.bin.setup:

#!/pl/sh
	python -m fault.development.bin.setup

This initializes (system/filepath)`~/.fault/fpi` with information scraped from
the tools found in (system/environ)`PATH`. It avoids feeding the compiler
collection interesting options for performance, but it does attempt to figure
out how to link executables and libraries on the system.

! NOTE:
	A fictitous (factor)`pkg` project is used for illustrative purposes.

#!/pl/sh
	git clone git://github.com/someguy/pkg.git pkg

SCM repositories should prefer to leave package contents uncontained. That is,
the contents of the first package should be the contents of the root directory.
This is preferred in order to allow packages to be arbitrarily named by the user.

#!/pl/sh
	python -m fault.development.bin.prepare pkg

&[Preparation] is the arbitrary operation performed when a source tree is to be
prepared for use. Usually, this only needs to be done once after a tree is fetched
from an SCM repository. Subsequent executions of &.bin.prepare should only be
necessary when changes are made to the sources that modify the factor set.

By default, &.bin.prepare does nothing. A factor set has to define hooks in order to
leverage it.

#!/pl/sh
	python -m fault.development.bin.construct pkg && \
	python -m fault.development.bin.induct pkg && \
	python -m fault.development.bin.validate pkg

All of these commands use the default construction context given that an environment
override was not configured. The default is the (fpi:context)`host` context.

! TODO:
	- More exploration of &.bin.

[ Programmatic Software Engineering ]

Using &.libdev to create and specify the consistency of targets at runtime.
