Constructing, testing, debugging, coverage, profiling and maybe deployment.

[ Defense ]
-----------

&..development seeks to make software development management as seamless as possible.
Construction, testing, coverage, and profiling are integrated in order to make development
processes easier and less fragile than systems that rely on the users to connect
tools together.

By integrating tools many development management problems cease to exist, and
opportunities to leverage patterns become available. With the consistent format of
extracted coverage and profile information, trends can be viewed across releases.

[ Construction ]
----------------

The primary purpose of &..development is the provision of an abstraction layer for constructing
targets, &.library.Factor instances. The abstraction layer defines the method that is used
to build a particular Factor Type on the given host, and usually for the given host.
However, the abstraction layer is composed so the Factor could be built for another platform
or no platform at all.

&..development.library provides an alternative autotools for small to medium sized projects.

! WARNING:
	The construction portion of development is a work in progress and the documentation
	will best be interpreted as a set of goals.

[ Testing ]
-----------

&.libtest is a dictionary protocol driven testing library. Users need not import &.libtest
in order to define their tests, only to run them. This means that test modules can be
imported without &.libtest being available; that is, alternative implementations can
perform tests without &.libtest.

The test object passed to collected tests provides an abstraction that allows for checks
to be performed using standard comparison operators:

#!/pl/python
	import something

	def test_something(test):
		expectation = (2,5)
		test/expectation == something.calculate(1)
		test/expectation > something.render()

	if __name__ == '__main__':
		import fault.development.libtest as libtest
		import sys; libtest.execute(sys.modules[__name__])

[ Measurements ]

! DEVELOPMENT: Undocumented.
	&.libmeasure's management of profile and coverage collection for reporting purposes.

[ Debugging ]

Currently there are plans for an improved Python debugger.

[ Documentation ]
-----------------

API documentation and narratives are extracted into an XML format with help from &..factors.
Used in conjunction with &.bin.measure, coverage, profile, and test results are joined into the XML for reporting into
the HTML for human readable publication.
